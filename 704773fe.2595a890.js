(window.webpackJsonp=window.webpackJsonp||[]).push([[21],{113:function(e,t,n){"use strict";n.d(t,"a",(function(){return b})),n.d(t,"b",(function(){return m}));var a=n(0),i=n.n(a);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var p=i.a.createContext({}),l=function(e){var t=i.a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},b=function(e){var t=l(e.components);return i.a.createElement(p.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return i.a.createElement(i.a.Fragment,{},t)}},u=i.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,o=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),b=l(n),u=a,m=b["".concat(o,".").concat(u)]||b[u]||d[u]||r;return n?i.a.createElement(m,s(s({ref:t},p),{},{components:n})):i.a.createElement(m,s({ref:t},p))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,o=new Array(r);o[0]=u;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:a,o[1]=s;for(var p=2;p<r;p++)o[p]=n[p];return i.a.createElement.apply(null,o)}return i.a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},93:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return s})),n.d(t,"metadata",(function(){return c})),n.d(t,"toc",(function(){return p})),n.d(t,"default",(function(){return b}));var a=n(3),i=n(7),r=(n(0),n(113)),o=["components"],s={title:"Getting Started"},c={unversionedId:"api/getting-started",id:"api/getting-started",isDocsHomePage:!1,title:"Getting Started",description:"Learn how to use the @availity/api-axios package for communicating with our APIs",source:"@site/docs/api/getting-started.md",slug:"/api/getting-started",permalink:"/sdk-js/api/getting-started",editUrl:"https://github.com/availity/sdk-js/edit/master/docusaurus/docs/api/getting-started.md",version:"current",sidebar:"someSidebar",previous:{title:"Error Logging",permalink:"/sdk-js/resources/exceptions"},next:{title:"Axios Resources",permalink:"/sdk-js/api/axios-resources"}},p=[{value:"Installation",id:"installation",children:[{value:"NPM",id:"npm",children:[]},{value:"Yarn",id:"yarn",children:[]}]},{value:"AvApi",id:"avapi",children:[{value:"Features",id:"features",children:[]},{value:"Usage",id:"usage",children:[]},{value:"Options",id:"options",children:[]},{value:"Request Config",id:"request-config",children:[]},{value:"Methods",id:"methods",children:[]}]},{value:"AvMicroserviceApi",id:"avmicroserviceapi",children:[]}],l={toc:p};function b(e){var t=e.components,n=Object(i.a)(e,o);return Object(r.b)("wrapper",Object(a.a)({},l,n,{components:t,mdxType:"MDXLayout"}),Object(r.b)("p",null,"Learn how to use the ",Object(r.b)("a",{parentName:"p",href:"https://github.com/Availity/sdk-js/tree/master/packages/api-axios#readme"},"@availity/api-axios")," package for communicating with our APIs"),Object(r.b)("p",null,Object(r.b)("a",{parentName:"p",href:"https://www.npmjs.com/package/@availity/api-axios"},Object(r.b)("img",{parentName:"a",src:"https://img.shields.io/npm/v/@availity/api-axios.svg?style=for-the-badge",alt:"Version"}))),Object(r.b)("h2",{id:"installation"},"Installation"),Object(r.b)("p",null,"Install the package through ",Object(r.b)("inlineCode",{parentName:"p"},"npm"),", ",Object(r.b)("inlineCode",{parentName:"p"},"yarn"),", or your favorite package manager. You must also install ",Object(r.b)("inlineCode",{parentName:"p"},"axios")," as well."),Object(r.b)("h3",{id:"npm"},"NPM"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-bash"},"npm install @availity/api-axios axios\n")),Object(r.b)("h3",{id:"yarn"},"Yarn"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-bash"},"yarn add @availity/api-axios axios\n")),Object(r.b)("h2",{id:"avapi"},"AvApi"),Object(r.b)("p",null,Object(r.b)("inlineCode",{parentName:"p"},"AvApi")," is the default export from ",Object(r.b)("inlineCode",{parentName:"p"},"@availity/api-axios"),". It is a class that wraps ",Object(r.b)("a",{parentName:"p",href:"https://axios-http.com/docs/intro"},"axios"),"."),Object(r.b)("h3",{id:"features"},"Features"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"Automatic polling of restful endpoints with timeouts"),Object(r.b)("li",{parentName:"ul"},"Simple URI builder for API resources"),Object(r.b)("li",{parentName:"ul"},"Life-cycle hooks into HTTP calls for GET, PUT, POST, and DELETE")),Object(r.b)("h3",{id:"usage"},"Usage"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-js"},"import AvApi from '@availity/api-axios';\n\nconst api = new AvApi({ name: 'test' });\n")),Object(r.b)("h3",{id:"options"},"Options"),Object(r.b)("h4",{id:"http"},Object(r.b)("inlineCode",{parentName:"h4"},"http")),Object(r.b)("p",null,"The default http client used is ",Object(r.b)("inlineCode",{parentName:"p"},"axios"),". You can pass an object to this parameter in order to override ",Object(r.b)("inlineCode",{parentName:"p"},"axios"),"."),Object(r.b)("h4",{id:"config"},Object(r.b)("inlineCode",{parentName:"h4"},"config")),Object(r.b)("p",null,Object(r.b)("a",{parentName:"p",href:"https://axios-http.com/docs/req_config"},"axios config object")," that will be passed to each call."),Object(r.b)("h3",{id:"request-config"},"Request Config"),Object(r.b)("p",null,"Listed below are the options we primarily use from the ",Object(r.b)("inlineCode",{parentName:"p"},"axios config")," or ones we have added."),Object(r.b)("h5",{id:"configapi"},Object(r.b)("inlineCode",{parentName:"h5"},"config.api")),Object(r.b)("p",null,"Default ",Object(r.b)("inlineCode",{parentName:"p"},"true"),". When ",Object(r.b)("inlineCode",{parentName:"p"},"true"),", the url is built out by joining ",Object(r.b)("inlineCode",{parentName:"p"},"path"),", ",Object(r.b)("inlineCode",{parentName:"p"},"version"),", and ",Object(r.b)("inlineCode",{parentName:"p"},"name")," or just ",Object(r.b)("inlineCode",{parentName:"p"},"url")," if no name is defined. The ",Object(r.b)("inlineCode",{parentName:"p"},"id")," is also added when appropriate. When ",Object(r.b)("inlineCode",{parentName:"p"},"api")," is ",Object(r.b)("inlineCode",{parentName:"p"},"false"),", all calls just use ",Object(r.b)("inlineCode",{parentName:"p"},"url"),". URL pattern: ",Object(r.b)("inlineCode",{parentName:"p"},"path/version/name")),Object(r.b)("h5",{id:"configurl"},Object(r.b)("inlineCode",{parentName:"h5"},"config.url")),Object(r.b)("p",null,"This is used for requests when ",Object(r.b)("inlineCode",{parentName:"p"},"config.api")," is false or ",Object(r.b)("inlineCode",{parentName:"p"},"name")," is undefined;"),Object(r.b)("h5",{id:"configpath"},Object(r.b)("inlineCode",{parentName:"h5"},"config.path")),Object(r.b)("p",null,"Used for url building when ",Object(r.b)("inlineCode",{parentName:"p"},"config.api")," is true. URL pattern ",Object(r.b)("inlineCode",{parentName:"p"},"path/version/name")),Object(r.b)("h5",{id:"configversion"},Object(r.b)("inlineCode",{parentName:"h5"},"config.version")),Object(r.b)("p",null,"Default ",Object(r.b)("inlineCode",{parentName:"p"},"v1"),". Used for url building when ",Object(r.b)("inlineCode",{parentName:"p"},"config.api")," is true. URL pattern ",Object(r.b)("inlineCode",{parentName:"p"},"path/version/name")),Object(r.b)("h5",{id:"configname"},Object(r.b)("inlineCode",{parentName:"h5"},"config.name")),Object(r.b)("p",null,"The name of the resource. Used for url building when ",Object(r.b)("inlineCode",{parentName:"p"},"api")," is true. (",Object(r.b)("inlineCode",{parentName:"p"},"path/version/name"),")"),Object(r.b)("h5",{id:"configcachebust"},Object(r.b)("inlineCode",{parentName:"h5"},"config.cacheBust")),Object(r.b)("p",null,"Disable caching for every request by adding a ",Object(r.b)("inlineCode",{parentName:"p"},"cacheBust")," parameter to the call."),Object(r.b)("p",null,"Accepts a boolean, function, or some value:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"If ",Object(r.b)("inlineCode",{parentName:"li"},"true"),", a timestamp is generated and used"),Object(r.b)("li",{parentName:"ul"},"If a function, it is called and return value is used"),Object(r.b)("li",{parentName:"ul"},"If a value is passed then the cache bust param is set to this value.")),Object(r.b)("h5",{id:"configpagebust"},Object(r.b)("inlineCode",{parentName:"h5"},"config.pageBust")),Object(r.b)("p",null,"Bust the browser cache on page load, and keep its value for lifecycle of the page. Same behavior as ",Object(r.b)("inlineCode",{parentName:"p"},"cacheBust")," except if true, a value is only generated once and re-used. A hard refresh of page resets the ",Object(r.b)("inlineCode",{parentName:"p"},"pageBust")," value. To manually set the ",Object(r.b)("inlineCode",{parentName:"p"},"pageBust")," value call without changing the config, use ",Object(r.b)("inlineCode",{parentName:"p"},"setPageBust(value)")," which will set the it to ",Object(r.b)("inlineCode",{parentName:"p"},"value")," or if undefined generate a timestamp."),Object(r.b)("h5",{id:"configsessionbust"},Object(r.b)("inlineCode",{parentName:"h5"},"config.sessionBust")),Object(r.b)("p",null,"Default ",Object(r.b)("inlineCode",{parentName:"p"},"true"),". Attempts to read a value in local storage that is generated at login. This forces the browser to bust the cache when a new session has started. If the local storage value is not found, uses the ",Object(r.b)("inlineCode",{parentName:"p"},"pageBust")," value."),Object(r.b)("h5",{id:"configpolling"},Object(r.b)("inlineCode",{parentName:"h5"},"config.polling")),Object(r.b)("p",null,"Default ",Object(r.b)("inlineCode",{parentName:"p"},"true"),". If true and rest services return ",Object(r.b)("inlineCode",{parentName:"p"},"202")," statuc code, ",Object(r.b)("inlineCode",{parentName:"p"},"AvApi")," will attempt to poll on predefined internvals until the retries are exhausted or the api returns non ",Object(r.b)("inlineCode",{parentName:"p"},"202")," response."),Object(r.b)("h5",{id:"configpollingintervals"},Object(r.b)("inlineCode",{parentName:"h5"},"config.pollingIntervals")),Object(r.b)("p",null,"An array of intervals (ms) to wait before making another request.\nDefault is 1, 2, 5, then 10 seconds. After all the intervals have been used, ",Object(r.b)("inlineCode",{parentName:"p"},"AvApi")," will stop attempting requests and return the last response."),Object(r.b)("h5",{id:"configgetheader"},Object(r.b)("inlineCode",{parentName:"h5"},"config.getHeader")),Object(r.b)("p",null,"Used for polling, if the ",Object(r.b)("inlineCode",{parentName:"p"},"http")," service used has special logic to get a header value, then define this function to handle that logic. If defined, it is called with ",Object(r.b)("inlineCode",{parentName:"p"},"(response, headerKey)"),".\nIf not defined, attempts to get ",Object(r.b)("inlineCode",{parentName:"p"},"key")," from ",Object(r.b)("inlineCode",{parentName:"p"},"response.headers[key]"),"."),Object(r.b)("h3",{id:"methods"},"Methods"),Object(r.b)("p",null,"Each method can use an after function, (ex. ",Object(r.b)("inlineCode",{parentName:"p"},"afterGet")," with ",Object(r.b)("inlineCode",{parentName:"p"},"get"),"). These are available to modify the response before it is resolved. Each method that has data available has a before function in order to modify data before the call is made."),Object(r.b)("p",null,"All methods accept a config object, which is merged into the resources config for that call only."),Object(r.b)("h4",{id:"create-or-post"},"create or post"),Object(r.b)("p",null,"Makes ",Object(r.b)("inlineCode",{parentName:"p"},"HTTP POST")," request."),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-js"},"import AvApi from '@availity/api-axios';\n\nconst api = new AvApi({ name: 'test' });\n\nconst post = async (data, config) => {\n  const response = await api.post(data, config);\n  return response.data;\n};\n\n// OR\nconst create = async (data, config) => {\n  const response = await api.create(data, config);\n  return response.data;\n};\n")),Object(r.b)("h4",{id:"postget"},"postGet"),Object(r.b)("p",null,"Makes ",Object(r.b)("inlineCode",{parentName:"p"},"HTTP POST")," using ",Object(r.b)("inlineCode",{parentName:"p"},"X-HTTP-Method-Override = 'GET'"),". There server must support override methods for the request to succeed."),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-js"},"import AvApi from '@availity/api-axios';\n\nconst api = new AvApi({ name: 'test' });\n\nconst postGet = async (data, config) => {\n  const response = await api.postGet(data, config);\n  return response.data;\n};\n")),Object(r.b)("h4",{id:"get"},"get"),Object(r.b)("p",null,"Retrieves an entity by ID. Makes ",Object(r.b)("inlineCode",{parentName:"p"},"HTTP GET")," call with ",Object(r.b)("inlineCode",{parentName:"p"},"/id")," in url."),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-js"},"import AvApi from '@availity/api-axios';\n\nconst api = new AvApi({ name: 'test' });\n\nconst get = async (id, config) => {\n  const response = await api.get(id, config);\n  return response.data;\n};\n")),Object(r.b)("h4",{id:"query"},"query"),Object(r.b)("p",null,"The query function is designed to fetch collections and search the API. Makes ",Object(r.b)("inlineCode",{parentName:"p"},"HTTP GET")," request with query params."),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-js"},"import AvApi from '@availity/api-axios';\n\nconst api = new AvApi({ name: 'test' });\n\nconst query = async (config) => {\n  const response = await api.query(config);\n  return response.data;\n};\n")),Object(r.b)("h4",{id:"update-or-put"},"update or put"),Object(r.b)("p",null,"Update an entity with a PUT call. When an id is passed in, ",Object(r.b)("inlineCode",{parentName:"p"},"/id")," is added to the url."),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-js"},"import AvApi from '@availity/api-axios';\n\nconst api = new AvApi({ name: 'test' });\n\nconst put = async (id, data, config) => {\n  const response = await api.put(id, data, config);\n  return response.data;\n};\n\n// OR\n\nconst update = async (data, config) => {\n  // You can also omit the id. this works for `put` as well\n  const response = await api.update(data, config);\n  return response.data;\n};\n")),Object(r.b)("h4",{id:"patch"},"patch"),Object(r.b)("p",null,"Update an entity with a PATCH call. When an id is passed in, ",Object(r.b)("inlineCode",{parentName:"p"},"/id")," is added to the url."),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-js"},"import AvApi from '@availity/api-axios';\n\nconst api = new AvApi({ name: 'test' });\n\nconst patch = async (id, data, config) => {\n  const response = await api.patch(id, data, config);\n  // You can also omit id, and only pass in data and config\n  // const response = await api.patch(data, config);\n  return response.data;\n};\n")),Object(r.b)("h4",{id:"remove-or-delete"},"remove or delete"),Object(r.b)("p",null,"Remove an entity with a DELETE call. When an id is passed in, ",Object(r.b)("inlineCode",{parentName:"p"},"/id")," is added to the url. If the first parameter is a string or number, it is treated as an ID, otherwise data."),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-js"},"import AvApi from '@availity/api-axios';\n\nconst api = new AvApi({ name: 'test' });\n\nconst remove = async (id, config) => {\n  const response = await api.remove(id, config);\n  return response.data;\n};\n\n// OR\n\nconst delete = async (data, config) => {\n  const response = await api.delete(data, config);\n  return response.data;\n};\n\n")),Object(r.b)("h2",{id:"avmicroserviceapi"},"AvMicroserviceApi"),Object(r.b)("p",null,Object(r.b)("inlineCode",{parentName:"p"},"AvMicroservice")," extends ",Object(r.b)("inlineCode",{parentName:"p"},"AvApi")," and thus can call the same methods. It has slightly different default ",Object(r.b)("a",{parentName:"p",href:"https://github.com/Availity/sdk-js/blob/master/packages/api-axios/src/options.js"},"config options"),"."))}b.isMDXComponent=!0}}]);