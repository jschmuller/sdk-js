(window.webpackJsonp=window.webpackJsonp||[]).push([[22],{113:function(e,n,t){"use strict";t.d(n,"a",(function(){return d})),t.d(n,"b",(function(){return m}));var i=t(0),a=t.n(i);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function s(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?s(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,i,a=function(e,n){if(null==e)return{};var t,i,a={},r=Object.keys(e);for(i=0;i<r.length;i++)t=r[i],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)t=r[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var l=a.a.createContext({}),p=function(e){var n=a.a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},d=function(e){var n=p(e.components);return a.a.createElement(l.Provider,{value:n},e.children)},b={inlineCode:"code",wrapper:function(e){var n=e.children;return a.a.createElement(a.a.Fragment,{},n)}},u=a.a.forwardRef((function(e,n){var t=e.components,i=e.mdxType,r=e.originalType,s=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),d=p(t),u=i,m=d["".concat(s,".").concat(u)]||d[u]||b[u]||r;return t?a.a.createElement(m,o(o({ref:n},l),{},{components:t})):a.a.createElement(m,o({ref:n},l))}));function m(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var r=t.length,s=new Array(r);s[0]=u;var o={};for(var c in n)hasOwnProperty.call(n,c)&&(o[c]=n[c]);o.originalType=e,o.mdxType="string"==typeof e?e:i,s[1]=o;for(var l=2;l<r;l++)s[l]=t[l];return a.a.createElement.apply(null,s)}return a.a.createElement.apply(null,t)}u.displayName="MDXCreateElement"},94:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return o})),t.d(n,"metadata",(function(){return c})),t.d(n,"toc",(function(){return l})),t.d(n,"default",(function(){return d}));var i=t(3),a=t(7),r=(t(0),t(113)),s=["components"],o={title:"Axios Resources"},c={unversionedId:"api/axios-resources",id:"api/axios-resources",isDocsHomePage:!1,title:"Axios Resources",description:"This page has information on pre-defined resources you will be able to import into your app.",source:"@site/docs/api/axios-resources.md",slug:"/api/axios-resources",permalink:"/sdk-js/api/axios-resources",editUrl:"https://github.com/availity/sdk-js/edit/master/docusaurus/docs/api/axios-resources.md",version:"current",sidebar:"someSidebar",previous:{title:"Getting Started",permalink:"/sdk-js/api/getting-started"},next:{title:"Codes",permalink:"/sdk-js/api/definitions/codes"}},l=[{value:"Table of Contents",id:"table-of-contents",children:[{value:"AvUserApi",id:"avuserapi",children:[]},{value:"AvRegionsApi",id:"avregionsapi",children:[]},{value:"AvPermissionsApi",id:"avpermissionsapi",children:[]},{value:"AvUserPermissionsApi",id:"avuserpermissionsapi",children:[]},{value:"AvSpacesApi",id:"avspacesapi",children:[]},{value:"AvOrganizationsApi",id:"avorganizationsapi",children:[]},{value:"AvProvidersApi",id:"avprovidersapi",children:[]},{value:"AvLogMessagesApi",id:"avlogmessagesapi",children:[]},{value:"AvPdfApi",id:"avpdfapi",children:[]},{value:"AvFilesApi",id:"avfilesapi",children:[]},{value:"AvFilesDelivery",id:"avfilesdelivery",children:[]},{value:"AvSettingsApi",id:"avsettingsapi",children:[]},{value:"AvDisclaimersApi",id:"avdisclaimersapi",children:[]},{value:"AvSlotMachineApi",id:"avslotmachineapi",children:[]}]}],p={toc:l};function d(e){var n=e.components,t=Object(a.a)(e,s);return Object(r.b)("wrapper",Object(i.a)({},p,t,{components:n,mdxType:"MDXLayout"}),Object(r.b)("p",null,"This page has information on pre-defined resources you will be able to import into your app."),Object(r.b)("h2",{id:"table-of-contents"},"Table of Contents"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",{parentName:"li",href:"#avuserapi"},"AvUserApi")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",{parentName:"li",href:"#avregionsapi"},"AvRegionsApi")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",{parentName:"li",href:"#avpermissionsapi"},"AvPermissionsApi")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",{parentName:"li",href:"#avuserpermissionsapi"},"AvUserPermissionsApi")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",{parentName:"li",href:"#avspacesapi"},"AvSpacesApi")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",{parentName:"li",href:"#avorganizationsapi"},"AvOrganizationsApi")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",{parentName:"li",href:"#avprovidersapi"},"AvProvidersApi")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",{parentName:"li",href:"#avlogmessageapi"},"AvLogMessageApi")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",{parentName:"li",href:"#avfilesapi"},"AvFilesApi")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",{parentName:"li",href:"#avfilesdeliveryapi"},"AvFilesDeliveryApi")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("a",{parentName:"li",href:"#avsettingsapi"},"AvSettingsApi"))),Object(r.b)("p",null,"Each pre-defined resource has two exports. The class and an instance. The class will follow the pattern ",Object(r.b)("inlineCode",{parentName:"p"},"AvUserApi")," and the instance will be ",Object(r.b)("inlineCode",{parentName:"p"},"avUserApi"),". In other words, the class is uppercase while the instance is lowercase."),Object(r.b)("p",null,"Use the class if you need to extend functionality. Otherwise import the instance to hit the ground running. Follow ",Object(r.b)("a",{parentName:"p",href:"https://availity.github.io/sdk-js/recipes/httpRequest"},"our guide")," for more information on creating your own endpoint."),Object(r.b)("h3",{id:"avuserapi"},"AvUserApi"),Object(r.b)("p",null,"Get information about the logged in user."),Object(r.b)("h4",{id:"meconfig"},Object(r.b)("inlineCode",{parentName:"h4"},"me(config)")),Object(r.b)("p",null,"Helper function that returns information about the logged in user."),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-js"},"import { avUserApi } from '@availity/api-axios';\n\nconst getUser = async (config) => {\n  const user = await avUserApi.me(config);\n  return user;\n};\n")),Object(r.b)("h3",{id:"avregionsapi"},"AvRegionsApi"),Object(r.b)("p",null,"Get the logged in user's currently selected region. Can also get all of the regions the user is associated with."),Object(r.b)("h4",{id:"getregionsconfig"},Object(r.b)("inlineCode",{parentName:"h4"},"getRegions(config)")),Object(r.b)("p",null,"Get all regions for the logged in user."),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-js"},"import { avRegionsApi } from '@availity/api-axios';\n\nconst fetchRegions = async (userId) => {\n  // This method will fetch the userId if you do not provide it\n  const response = await avRegionsApi.getRegions({ params: { userId } });\n\n  return response.data;\n};\n")),Object(r.b)("h4",{id:"getcurrentregion"},Object(r.b)("inlineCode",{parentName:"h4"},"getCurrentRegion()")),Object(r.b)("p",null,"Returns the currently active region for the user."),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-js"},"import { avRegionsApi } from '@availity/api-axios';\n\nconst getRegion = async () => {\n  const response = await avRegionsApi.getCurrentRegion();\n\n  return response.data;\n};\n")),Object(r.b)("h3",{id:"avpermissionsapi"},"AvPermissionsApi"),Object(r.b)("p",null,"Get permissions belonging to the logged in user."),Object(r.b)("h4",{id:"getpermissionspermissionid-region"},Object(r.b)("inlineCode",{parentName:"h4"},"getPermissions(permissionId, region)")),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-js"},"import { avPermissionsApi } from '@availity/api-axios';\n\nconst fetchPermissions = async (id, region) => {\n  const response = await avPermissionsApi.getPermissions(id, region);\n\n  return response.data;\n};\n")),Object(r.b)("h3",{id:"avuserpermissionsapi"},"AvUserPermissionsApi"),Object(r.b)("p",null,"Get permissions as well as resources of the logged in user."),Object(r.b)("h4",{id:"getpermissionspermissionid-region-1"},Object(r.b)("inlineCode",{parentName:"h4"},"getPermissions(permissionId, region)")),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-js"},"import { avUserPermissionsApi } from '@availity/api-axios';\n\nconst fetchPermissions = async (id, region) => {\n  const response = await avUserPermissionsApi.getPermissions(id, region);\n\n  return response.data;\n};\n")),Object(r.b)("h3",{id:"avspacesapi"},"AvSpacesApi"),Object(r.b)("p",null,"Get metadata for the various content types for the Spaces platform."),Object(r.b)("h4",{id:"parsespaceidquery"},Object(r.b)("inlineCode",{parentName:"h4"},"parseSpaceId(query)")),Object(r.b)("p",null,"Get the ",Object(r.b)("inlineCode",{parentName:"p"},"spaceId")," from a query string"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-js"},"import { avSpacesApi } from '@availity/api-axios';\n\n// spaceId will be 123\nconst spaceId = avSpacesApi.parseSpaceId('?foo=bar&spaceId=123');\n")),Object(r.b)("h4",{id:"getspacenamespaceid"},Object(r.b)("inlineCode",{parentName:"h4"},"getSpaceName(spaceId)")),Object(r.b)("p",null,"Returns the ",Object(r.b)("inlineCode",{parentName:"p"},"name")," from the response"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-js"},"import { avSpacesApi } from '@availity/api-axios';\n\nconst getName = async () => {\n  // will return response.data.name\n  const name = await avSpacesApi.getSpaceName('123');\n  return name;\n};\n")),Object(r.b)("h3",{id:"avorganizationsapi"},"AvOrganizationsApi"),Object(r.b)("p",null,"Service that allows you to get user's organizations."),Object(r.b)("h4",{id:"queryorganizationsuser-config"},Object(r.b)("inlineCode",{parentName:"h4"},"queryOrganizations(user, config)")),Object(r.b)("p",null,"Returns organizations belonging to the ",Object(r.b)("inlineCode",{parentName:"p"},"user"),"."),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-js"},"function queryOrganizations(user, config) {\n  const queryConfig = this.addParams({ userId: user.id }, config);\n  return this.query(queryConfig);\n}\n")),Object(r.b)("h4",{id:"getorganizationsconfig"},Object(r.b)("inlineCode",{parentName:"h4"},"getOrganizations(config)")),Object(r.b)("p",null,"Returns organizations belonging to the logged in user."),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-js"},"function getOrganizations(config) {\n  if (config && config.params && config.params.userId) {\n    return this.query(config);\n  }\n\n  if (!this.avUsers || !this.avUsers.me) {\n    throw new Error('avUsers must be defined');\n  }\n\n  return this.avUsers\n    .me()\n    .then((user) => this.queryOrganizations(user, config));\n}\n")),Object(r.b)("h4",{id:"postgetdata-config-additionalpostgetargs"},Object(r.b)("inlineCode",{parentName:"h4"},"postGet(data, config, additionalPostGetArgs)")),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-js"},"async function postGet(data, config) {\n  if (additionalPostGetArgs) {\n    const { data: organizationsData } = await super.postGet(data, config);\n\n    return this.getFilteredOrganizations(\n      organizationsData,\n      additionalPostGetArgs,\n      data\n    );\n  }\n\n  return super.postGet(data, config);\n}\n")),Object(r.b)("h4",{id:"getfilteredorganizationsorganizationsdata-additionalpostgetargs-restqueryparams"},Object(r.b)("inlineCode",{parentName:"h4"},"getFilteredOrganizations(organizationsData, additionalPostGetArgs, restQueryParams)")),Object(r.b)("p",null,"Returns organizations belonging to the logged in user that also have specified ",Object(r.b)("inlineCode",{parentName:"p"},"resources"),". Meant to be called by ",Object(r.b)("inlineCode",{parentName:"p"},"AvOrganizationSelect"),", but can be called directly if you already have ",Object(r.b)("inlineCode",{parentName:"p"},"organizations")," data."),Object(r.b)("blockquote",null,Object(r.b)("p",{parentName:"blockquote"},"Please note that pagination will not occur for ",Object(r.b)("inlineCode",{parentName:"p"},"organizationsData")," when ",Object(r.b)("inlineCode",{parentName:"p"},"getFilteredOrganizations")," is called directly. If pagination is needed, use ",Object(r.b)("a",{parentName:"p",href:"https://availity.github.io/availity-react/storybook/?path=/docs/form-components-select-async-selects--organization-select"},"AvOrganizationSelect")," with the ",Object(r.b)("inlineCode",{parentName:"p"},"resourceIds")," prop or ",Object(r.b)("inlineCode",{parentName:"p"},"postGet(data, config, additionalPostGetArgs)"),", where ",Object(r.b)("inlineCode",{parentName:"p"},"additionalPostGetArgs")," is an object containing the ",Object(r.b)("inlineCode",{parentName:"p"},"resourceIds")," prop.")),Object(r.b)("p",null,"Arguments should be structured as follows:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-js"},"const organizationsData = {\n  organizations, // Array of organization objects\n  limit,\n  offset,\n  totalCount,\n};\n\nconst additionalPostGetArgs = {\n  resourceIds, // string or array of strings\n};\n\nconst data = {\n  permissionId,\n  region,\n};\n")),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-js"},"async function getFilteredOrganizations(\n  organizationsData,\n  additionalPostGetArgs,\n  data\n) {\n  const { resourceIds } = additionalPostGetArgs;\n  const { permissionId, region } = data;\n  const {\n    organizations,\n    limit: orgLimit,\n    offset: orgOffset,\n    totalCount: totalOrgCount,\n  } = organizationsData;\n\n  if (typeof permissionId !== 'string' && !Array.isArray(permissionId)) {\n    throw new TypeError(\n      'permissionId must be either an array of ids or a string'\n    );\n  }\n  if (typeof resourceIds !== 'string' && !Array.isArray(resourceIds)) {\n    throw new TypeError(\n      'resourceIds must be either an array of ids or a string'\n    );\n  }\n\n  // resourceIds is passed as readOnly, convert so that we can use Array methods on it\n  const resourceIdsArray =\n    typeof resourceIds === 'string' ? [resourceIds] : resourceIds;\n\n  if (\n    region !== this.previousRegionId ||\n    !this.arePermissionsEqual(permissionId)\n  ) {\n    // avUserPermissions will return a list of user organizations that match given permission and region\n    // This call does not need to be paginated and\n    // we should not need to call it every time we paginate orgs if region and permissions are the same\n    // Limit is set to permissionId.length because that represents maximum results we can get back\n    const {\n      data: { axiUserPermissions: userPermissions },\n    } = await this.avUserPermissions.postGet({\n      permissionId,\n      region,\n      limit: permissionId.length,\n    });\n\n    if (userPermissions) {\n      this.userPermissions = userPermissions;\n      this.previousPermissionIds = permissionId;\n      this.previousRegionId = region;\n    } else {\n      throw new Error('avUserPermissions call failed');\n    }\n  }\n\n  // Reduce the userPermissions result into a collection of orgs that contain a valid resource\n  const authorizedOrgs = this.userPermissions.reduce(\n    (accum, userPermission) => {\n      userPermission.organizations.forEach((userOrg) => {\n        const isDuplicate = accum.some((item) => item.id === userOrg.id);\n        if (!isDuplicate) {\n          // If this org contains one of the passed in resourceIds, it is an authorized org\n          const match = userOrg.resources.some((userResource) => {\n            return resourceIdsArray.some(\n              (resource) => Number(resource) === Number(userResource.id)\n            );\n          });\n          if (match) {\n            accum.push({ id: userOrg.id });\n          }\n        }\n      });\n\n      return accum;\n    },\n    []\n  );\n\n  // avUserPermissions call doesn't return much useful organization data\n  // but we can match valid ids to useful data returned from avOrganizations\n  const authorizedFilteredOrgs = organizations.filter((org) =>\n    authorizedOrgs.some((authorizedOrg) => authorizedOrg.id === org.id)\n  );\n\n  // Transform back into data object that ResourceSelect can use and paginate\n  return {\n    data: {\n      authorizedFilteredOrgs,\n      totalCount: totalOrgCount,\n      limit: orgLimit,\n      offset: orgOffset,\n    },\n  };\n}\n\nfunction arePermissionsEqual(permissionId) {\n  if (typeof permissionId !== typeof this.previousPermissionIds) return false;\n\n  if (typeof permissionId === 'string')\n    return permissionId === this.previousPermissionIds;\n\n  if (\n    Array.isArray(permissionId) &&\n    Array.isArray(this.previousPermissionIds)\n  ) {\n    if (permissionId.length !== this.previousPermissionIds.length) return false;\n\n    // if lengths are equal, need a way to check if values are the same or not\n    // Sets won't allow duplicate values\n    // if size of Set is greater than length of original arrays\n    // then a different value was inserted and they are not equal\n    const idSet = new Set([...permissionId], [...this.previousPermissionIds]);\n    if (idSet.size !== permissionId.length) return false;\n\n    return true;\n  }\n\n  return false;\n}\n")),Object(r.b)("h3",{id:"avprovidersapi"},"AvProvidersApi"),Object(r.b)("p",null,"Get providers associated to the logged in user's organization."),Object(r.b)("h4",{id:"getproviderscustomerid-config"},Object(r.b)("inlineCode",{parentName:"h4"},"getProviders(customerId, config)")),Object(r.b)("p",null,"Helper method that gets the providers for the ",Object(r.b)("inlineCode",{parentName:"p"},"customerId"),"."),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-js"},"function getProviders(customerId, config) {\n  const queryConfig = this.addParams({ customerId }, config);\n  return this.query(queryConfig);\n}\n")),Object(r.b)("h4",{id:"normalizeproviders"},Object(r.b)("inlineCode",{parentName:"h4"},"normalize(providers)")),Object(r.b)("p",null,"Helper method that adds ",Object(r.b)("inlineCode",{parentName:"p"},"name")," field to the ",Object(r.b)("inlineCode",{parentName:"p"},"providers")," collection. The name field is computed from other properies of the provider object."),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-js"},"function normalize(providers) {\n  const cloned = providers.slice();\n\n  cloned.forEach((provider) => {\n    provider.name = provider.businessName\n      ? provider.businessName\n      : `${provider.lastName}, ${provider.firstName}`;\n  });\n\n  return cloned;\n}\n")),Object(r.b)("h3",{id:"avlogmessagesapi"},"AvLogMessagesApi"),Object(r.b)("p",null,"Create a log message."),Object(r.b)("h4",{id:"sendlevel-entires"},Object(r.b)("inlineCode",{parentName:"h4"},"send(level, entires)")),Object(r.b)("p",null,"All methods take a key value object. A key named 'level` determines the log level type in the logs."),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-js"},"function send(level, entries) {\n  delete entries.level;\n  const payload = { level, entries };\n  const flattened = flattenObject(payload);\n\n  return Object.keys(flattened).reduce((accum, key) => {\n    accum.append(key, flattened[key]);\n    return accum;\n  }, new FormData());\n}\n")),Object(r.b)("h4",{id:"debugentries"},Object(r.b)("inlineCode",{parentName:"h4"},"debug(entries)")),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-js"},"function debug(entries) {\n  return this.sendBeacon(this.send('debug', entries));\n}\n")),Object(r.b)("h4",{id:"infoentries"},Object(r.b)("inlineCode",{parentName:"h4"},"info(entries)")),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-js"},"function info(entries) {\n  return this.sendBeacon(this.send('info', entries));\n}\n")),Object(r.b)("h4",{id:"warnentries"},Object(r.b)("inlineCode",{parentName:"h4"},"warn(entries)")),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-js"},"function warn(entries) {\n  return this.sendBeacon(this.send('warn', entries));\n}\n")),Object(r.b)("h4",{id:"errorentries"},Object(r.b)("inlineCode",{parentName:"h4"},"error(entries)")),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-js"},"function error(entries) {\n  return this.sendBeacon(this.send('error', entries));\n}\n")),Object(r.b)("h3",{id:"avpdfapi"},"AvPdfApi"),Object(r.b)("h4",{id:"onpdfresponse"},Object(r.b)("inlineCode",{parentName:"h4"},"onPdf(response)")),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-js"},"function onPdf(response) {\n  window.location = response.data.links.pdf.href;\n}\n")),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-js"},"function getPdf(data, config) {\n  if (!data.applicationId || !data.fileName || !data.html) {\n    throw new Error('[applicationId], [fileName] and [html] must be defined');\n  }\n\n  return this.post(data, config).then(this.onPdf);\n}\n")),Object(r.b)("h3",{id:"avfilesapi"},"AvFilesApi"),Object(r.b)("p",null,"Upload a file to a bucket in the vault"),Object(r.b)("h4",{id:"uploadfiledata-config"},Object(r.b)("inlineCode",{parentName:"h4"},"uploadFile(data, config)")),Object(r.b)("p",null,"Method to upload a file. ",Object(r.b)("inlineCode",{parentName:"p"},"data")," contains FormData elements with a key of either ",Object(r.b)("inlineCode",{parentName:"p"},"reference")," (if pointed to an existing file) or ",Object(r.b)("inlineCode",{parentName:"p"},"filedata")," (if uploading a new file)\n",Object(r.b)("inlineCode",{parentName:"p"},"config")," should contain ",Object(r.b)("inlineCode",{parentName:"p"},"customerId"),", ",Object(r.b)("inlineCode",{parentName:"p"},"id")," (the bucketId), and ",Object(r.b)("inlineCode",{parentName:"p"},"clientId")),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-js"},"function uploadFile(data, config) {\n  if (!config.customerId || !config.clientId) {\n    throw new Error(\n      '[config.customerId] and [config.clientId] must be defined'\n    );\n  }\n  config = this.config(config);\n  config.headers['X-Availity-Customer-ID'] = config.customerId;\n  config.headers['X-Client-ID'] = config.clientId;\n\n  return this.create(data, config);\n}\n")),Object(r.b)("h3",{id:"avfilesdelivery"},"AvFilesDelivery"),Object(r.b)("p",null,"Upload a batch of files to a designated channel configured on the server."),Object(r.b)("h4",{id:"uploadfilesdeliverydata-config"},Object(r.b)("inlineCode",{parentName:"h4"},"uploadFilesDelivery(data, config)")),Object(r.b)("p",null,"Method to upload a batch of file deliveries. ",Object(r.b)("inlineCode",{parentName:"p"},"data")," contains an array of ",Object(r.b)("inlineCode",{parentName:"p"},"deliveries"),". Provide the ",Object(r.b)("inlineCode",{parentName:"p"},"fileUri")," (reference field from AvFiles), ",Object(r.b)("inlineCode",{parentName:"p"},"deliveryChannel"),", and the required ",Object(r.b)("inlineCode",{parentName:"p"},"metadata")," for that channel."),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-js"},"function uploadFilesDelivery(data, config) {\n  if (!config.customerId || !config.clientId) {\n    throw new Error(\n      '[config.customerId] and [config.clientId] must be defined'\n    );\n  }\n  config = this.config(config);\n  config.headers['X-Availity-Customer-ID'] = config.customerId;\n  config.headers['X-Client-ID'] = config.clientId;\n\n  return this.create(data || {}, config);\n}\n")),Object(r.b)("p",null,"Example ",Object(r.b)("inlineCode",{parentName:"p"},"data")),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-js"},"const data = {\n  deliveries: [\n    {\n      fileURI: upload.references[0],\n      deliveryChannel: 'DEMO',\n      metadata: {\n        payerId: 'PAYERID',\n        requestId: '123',\n        patientLastName: 'lastName',\n        patientFirstName: 'firstName',\n      },\n    },\n  ],\n};\n")),Object(r.b)("p",null,Object(r.b)("inlineCode",{parentName:"p"},"config")," should contain ",Object(r.b)("inlineCode",{parentName:"p"},"customerId")," and ",Object(r.b)("inlineCode",{parentName:"p"},"clientId")),Object(r.b)("h4",{id:"example-response"},"Example Response"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-json"},'{\n  "id": "123456", // batchId "status": "COMPLETE", // COMPLETE/INPROGRESS\n  "deliveries": [\n    {\n      "id": "56789", // deliveryId "deliveryBatchId": "123456",\n      "fileURI": "<fileUri>",\n      "deliveryChannel": "DEMO",\n      "deliveryStatus": "ERRORED", // INPROGRESS/REJECTED/ERRORED/DELIVERED\n      "errors": [{ "message": "error message", "subject": "subject of error" }],\n      "metadata": {\n        "payerId": "PAYERID",\n        "requestId": "123",\n        "patientLastName": "lastName",\n        "patientFirstName": "firstName"\n      }\n    }\n  ]\n}\n')),Object(r.b)("h4",{id:"getlocationresponse"},Object(r.b)("inlineCode",{parentName:"h4"},"getLocation(response)")),Object(r.b)("p",null,"Return the url based on the response"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-js"},"import { avFilesDeliveryApi } from '@availity/api-axios';\n\nconst getLocation = (response) => {\n  const url = avFilesDeliveryApi.getLocation(response);\n  return url;\n};\n")),Object(r.b)("h3",{id:"avsettingsapi"},"AvSettingsApi"),Object(r.b)("p",null,"Store and retrieve settings to be reused."),Object(r.b)("h4",{id:"getapplicationapplicationdid-config"},Object(r.b)("inlineCode",{parentName:"h4"},"getApplication(applicationdId, config)")),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-js"},"import { avSettingsApi } from '@availity/api-axios';\n\nconst appId = 'test-app';\n\nconst getSettings = async () => {\n  const response = await avSettingsApi.getApplication(appId);\n  return response.data;\n};\n")),Object(r.b)("h4",{id:"setapplicationapplicationid-data-config"},Object(r.b)("inlineCode",{parentName:"h4"},"setApplication(applicationId, data, config)")),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-js"},"import { avSettingsApi } from '@availity/api-axios';\n\nconst appId = 'test-app';\n\nconst updateSettings = async (data) => {\n  const response = await avSettingsApi.setApplication(appId, data);\n  return response.data;\n};\n")),Object(r.b)("h3",{id:"avdisclaimersapi"},"AvDisclaimersApi"),Object(r.b)("p",null,"Get disclaimers for payer space"),Object(r.b)("h4",{id:"getdisclaimersid-config"},Object(r.b)("inlineCode",{parentName:"h4"},"getDisclaimers(id, config)")),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-js"},"import { avDisclaimersApi } from '@availity/api-axios';\n\nconst fetchDisclaimers = async (id) => {\n  const response = await avDisclaimersApi.getDisclaimers(id);\n  return response.data;\n};\n")),Object(r.b)("h3",{id:"avslotmachineapi"},"AvSlotMachineApi"),Object(r.b)("p",null,"GraphQL Server containing different queries and mutation"),Object(r.b)("h4",{id:"queryquery-variables"},Object(r.b)("inlineCode",{parentName:"h4"},"query(query, variables)")),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-js"},"import { avSlotMachineApi } from '@availity/api-axios';\n\nconst queryApi = async (query, variables) => {\n  const response = await avSlotMachineApi.query(query, variables);\n  return response.data;\n};\n")))}d.isMDXComponent=!0}}]);