(window.webpackJsonp=window.webpackJsonp||[]).push([[16],{113:function(e,t,n){"use strict";n.d(t,"a",(function(){return u})),n.d(t,"b",(function(){return m}));var a=n(0),r=n.n(a);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=r.a.createContext({}),c=function(e){var t=r.a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},u=function(e){var t=c(e.components);return r.a.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},b=r.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,o=e.parentName,l=p(e,["components","mdxType","originalType","parentName"]),u=c(n),b=a,m=u["".concat(o,".").concat(b)]||u[b]||d[b]||i;return n?r.a.createElement(m,s(s({ref:t},l),{},{components:n})):r.a.createElement(m,s({ref:t},l))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=b;var s={};for(var p in t)hasOwnProperty.call(t,p)&&(s[p]=t[p]);s.originalType=e,s.mdxType="string"==typeof e?e:a,o[1]=s;for(var l=2;l<i;l++)o[l]=n[l];return r.a.createElement.apply(null,o)}return r.a.createElement.apply(null,n)}b.displayName="MDXCreateElement"},88:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return s})),n.d(t,"metadata",(function(){return p})),n.d(t,"toc",(function(){return l})),n.d(t,"default",(function(){return u}));var a=n(3),r=n(7),i=(n(0),n(113)),o=["components"],s={title:"Making an HTTP Request"},p={unversionedId:"recipes/http-request",id:"recipes/http-request",isDocsHomePage:!1,title:"Making an HTTP Request",description:"In this guide we will outline ways to connect to endpoints inside the Availity portal.",source:"@site/docs/recipes/http-request.md",slug:"/recipes/http-request",permalink:"/sdk-js/recipes/http-request",editUrl:"https://github.com/availity/sdk-js/edit/master/docusaurus/docs/recipes/http-request.md",version:"current",sidebar:"someSidebar",previous:{title:"Creating a Proxy",permalink:"/sdk-js/recipes/proxy"}},l=[{value:"Getting Started",id:"getting-started",children:[]},{value:"Example",id:"example",children:[{value:"GET",id:"get",children:[]},{value:"POST",id:"post",children:[]},{value:"PUT",id:"put",children:[]},{value:"Delete",id:"delete",children:[]}]},{value:"Error Handling",id:"error-handling",children:[]},{value:"FAQ",id:"faq",children:[]}],c={toc:l};function u(e){var t=e.components,n=Object(r.a)(e,o);return Object(i.b)("wrapper",Object(a.a)({},c,n,{components:t,mdxType:"MDXLayout"}),Object(i.b)("p",null,"In this guide we will outline ways to connect to endpoints inside the Availity portal."),Object(i.b)("h2",{id:"getting-started"},"Getting Started"),Object(i.b)("p",null,"Let's get started by installing two libraries we will need: ",Object(i.b)("a",{parentName:"p",href:"https://availity.github.io/sdk-js/api/getting-started"},"@availity/api-axios")," and ",Object(i.b)("a",{parentName:"p",href:"https://axios-http.com/docs/intro"},"axios"),". They can be installed with either ",Object(i.b)("inlineCode",{parentName:"p"},"npm")," or ",Object(i.b)("inlineCode",{parentName:"p"},"yarn"),"."),Object(i.b)("p",null,"NPM"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-bash"},"npm install @availity/api-axios axios\n")),Object(i.b)("p",null,"Yarn"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-bash"},"yarn add @availity/api-axios axios\n")),Object(i.b)("h2",{id:"example"},"Example"),Object(i.b)("p",null,"We are going to use ",Object(i.b)("inlineCode",{parentName:"p"},"@availity/api-axios")," to send http requests to the endpoint ",Object(i.b)("inlineCode",{parentName:"p"},"https://apps.availity.com/api/v1/test/example"),"."),Object(i.b)("p",null,"If our endpoint starts with ",Object(i.b)("inlineCode",{parentName:"p"},"/api/v1/"),", then the only thing we need to pass the constructor is a ",Object(i.b)("inlineCode",{parentName:"p"},"name")),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-js"},"import AvApi from '@availity/api-axios';\n\nconst api = new AvApi({ name: 'test/example' });\n")),Object(i.b)("p",null,"However, if your url is different from this then you can also pass in a full url"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-js"},"import AvApi from '@availity/api-axios';\n\n// When we call our api it will use the url: https://apps.availity.com/not-api/v2/test\nconst api = new AvApi({ url: 'not-api/v2/test' });\n")),Object(i.b)("p",null,"Now that we have our api object setup, we can call it using various methods. ",Object(i.b)("inlineCode",{parentName:"p"},"GET"),", ",Object(i.b)("inlineCode",{parentName:"p"},"POST"),", ",Object(i.b)("inlineCode",{parentName:"p"},"PUT"),", and ",Object(i.b)("inlineCode",{parentName:"p"},"DELETE")," are all available."),Object(i.b)("h3",{id:"get"},"GET"),Object(i.b)("p",null,"There are two ways to make a call with ",Object(i.b)("inlineCode",{parentName:"p"},"GET"),". You can use the ",Object(i.b)("inlineCode",{parentName:"p"},"get")," or ",Object(i.b)("inlineCode",{parentName:"p"},"query")," methods provided. I like to use ",Object(i.b)("inlineCode",{parentName:"p"},"get")," when I have an id that will be appended to the url, and ",Object(i.b)("inlineCode",{parentName:"p"},"query")," for all other scenarios"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-js"},"import AvApi from '@availity/api-axios';\n\nconst api = new AvApi({ name: 'test/example' });\n\n// get\nconst getData = async () => {\n  // This will send a request to https://apps.availity.com/api/v1/test/example/my-id\n  const response = await api.get('my-id');\n\n  // The response body will always be in response.data\n  return response.data;\n};\n\n// query\nconst queryData = async () => {\n  // This will send a request to https://apps.availity.com/api/v1/test/example?id=my-id\n  const response = await api.query({ params: { id: 'my-id' } });\n\n  // The response body will always be in response.data\n  return response.data;\n};\n")),Object(i.b)("h3",{id:"post"},"POST"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-js"},"import AvApi from '@availity/api-axios';\n\nconst api = new AvApi({ name: 'test/example' });\n\nconst postData = async () => {\n  // This will send a request to https://apps.availity.com/api/v1/test/example\n  const response = await api.post({ id: '123' });\n\n  // The response body will always be in response.data\n  return response.data;\n};\n")),Object(i.b)("h3",{id:"put"},"PUT"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-js"},"import AvApi from '@availity/api-axios';\n\nconst api = new AvApi({ name: 'test/example' });\n\nconst putData = async () => {\n  // This will send a request to https://apps.availity.com/api/v1/test/example/123\n  const response = await api.put('123', { name: '123' });\n\n  // The response body will always be in response.data\n  return response.data;\n};\n")),Object(i.b)("h3",{id:"delete"},"Delete"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-js"},"import AvApi from '@availity/api-axios';\n\nconst api = new AvApi({ name: 'test/example' });\n\nconst postData = async () => {\n  // This will send a request to https://apps.availity.com/api/v1/test/example/123\n  const response = await api.delete('123');\n\n  // The response body will always be in response.data\n  return response.data;\n};\n")),Object(i.b)("h2",{id:"error-handling"},"Error Handling"),Object(i.b)("p",null,"If you are familiar with ",Object(i.b)("inlineCode",{parentName:"p"},"axios"),", then you may know when an http call is made an error will be thrown when the status code is in the 400s or 500s. We recommend the following pattern to handle this behavior"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-js"},"import { avUserApi } from '@availity/api-axios';\n\nconst getUser = async () => {\n  try {\n    const user = await avUserApi.me();\n\n    // The `me` method returns the data directly.\n    // No need to access `user.data`\n    return user;\n  } catch (error) {\n    // You can either return something based on the message\n    // or return the full error\n    if (error.response?.status === 401) {\n      return { error: 'You are unauthorized' };\n    }\n    return error;\n  }\n};\n")),Object(i.b)("h2",{id:"faq"},"FAQ"),Object(i.b)("p",null,"Q: Where is the ",Object(i.b)("inlineCode",{parentName:"p"},"apps.availity.com")," part of the url coming from?"),Object(i.b)("p",null,"A: ",Object(i.b)("inlineCode",{parentName:"p"},"@availity/api-axios")," uses ",Object(i.b)("inlineCode",{parentName:"p"},"axios")," under the hood. This lets us use relative urls so you don't have to specify which environment you want to hit. eg: if the app is in qa-apps.availity.com, then that will be the origin of the url instead of apps.availity.com like we have mentioned in the example."),Object(i.b)("hr",null),Object(i.b)("p",null,"Q: How do I add headers?"),Object(i.b)("p",null,"A: You can pass headers to the constructor or to the config for a specific request"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-js"},"import AvApi from '@availity/api-axios';\n\nconst api = new AvApi({ name: 'test', headers: { 'A-STATIC-HEADER': '987' } });\n")),Object(i.b)("p",null,"OR"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-js"},"import AvApi from '@availity/api-axios';\n\nconst api = new AvApi({ name: 'test' });\n\nconst getWithHeaders = async (headerValue) => {\n  // We are using the `get` method here, however all of\n  // the http methods accept a config as the final argument\n  const response = await api.get('123', {\n    headers: { 'A-DYNAMIC-HEADER': headerValue },\n  });\n\n  return response.data;\n};\n")))}u.isMDXComponent=!0}}]);